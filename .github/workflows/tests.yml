name: Tests & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpq-dev \
          redis-server \
          chromium-browser \
          chromium-chromedriver

    - name: Start Redis
      run: |
        sudo systemctl start redis-server
        redis-cli ping

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: Run linting
      run: |
        # Code formatting check
        black --check backend/ nlp/ scrapers/

        # Import sorting check
        isort --check-only backend/ nlp/ scrapers/

        # Linting
        flake8 backend/ nlp/ scrapers/ --max-line-length=100 --extend-ignore=E203,W503

        # Type checking
        mypy backend/ --ignore-missing-imports

    - name: Run security checks
      run: |
        # Security vulnerability scanning
        bandit -r backend/ nlp/ scrapers/ -f json -o bandit-report.json || true

        # Dependency security check
        safety check --json || true

    - name: Run unit tests
      run: |
        pytest tests/ backend/tests/ \
          -m "unit and not slow" \
          --cov \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=junit.xml \
          -v

    - name: Run integration tests
      if: matrix.python-version == '3.11'
      run: |
        pytest tests/ backend/tests/ \
          -m "integration" \
          --cov \
          --cov-append \
          --cov-report=xml \
          --junitxml=junit-integration.xml \
          -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit*.xml
          htmlcov/
          coverage.xml
          bandit-report.json

    - name: Comment coverage on PR
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request' && matrix.python-version == '3.11'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 70
        MINIMUM_ORANGE: 50

  test-fast:
    name: Fast Tests (Unit Only)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: Run fast unit tests only
      run: |
        pytest tests/ backend/tests/ \
          -m "unit and fast" \
          --maxfail=3 \
          -x \
          -v

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: Generate full coverage report
      run: |
        pytest tests/ backend/tests/ \
          --cov \
          --cov-report=html \
          --cov-report=term \
          --cov-report=json

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

    - name: Check coverage threshold
      run: |
        # Week 1 target: 30-40%
        # Week 3 target: 70-85%
        COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
        echo "Current coverage: ${COVERAGE}%"

        # Warn if below Week 1 target
        if (( $(echo "$COVERAGE < 30" | bc -l) )); then
          echo "::warning::Coverage ${COVERAGE}% is below Week 1 target of 30%"
        fi

  nightly:
    name: Nightly Full Test Suite
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: Run all tests including slow tests
      run: |
        pytest tests/ backend/tests/ \
          -m "not requires_api_key" \
          --cov \
          --cov-report=html \
          --cov-report=term \
          --durations=20 \
          -v

    - name: Run performance benchmarks
      run: |
        pytest tests/ backend/tests/ \
          -m "benchmark" \
          --benchmark-only \
          --benchmark-json=benchmark.json || true
