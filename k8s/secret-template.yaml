---
# Secret template - DO NOT commit actual secrets to version control
# Use sealed-secrets or external secret management (Vault, AWS Secrets Manager, etc.)
apiVersion: v1
kind: Secret
metadata:
  name: openlearn-secrets
  labels:
    app: openlearn
    component: backend
type: Opaque
stringData:
  # Database connection
  database-url: "postgresql://username:password@postgres:5432/openlearn"

  # Redis connection
  redis-url: "redis://redis:6379/0"

  # Elasticsearch connection (optional)
  elasticsearch-url: "http://elasticsearch:9200"

  # Application secret key (generate with: python -c "import secrets; print(secrets.token_urlsafe(32))")
  secret-key: "CHANGE_ME_TO_RANDOM_SECRET"

  # JWT secret
  jwt-secret: "CHANGE_ME_TO_RANDOM_JWT_SECRET"

  # External API keys (if needed)
  # openai-api-key: "sk-..."
  # anthropic-api-key: "sk-ant-..."

---
# Instructions for creating secrets:
#
# 1. Using kubectl:
#    kubectl create secret generic openlearn-secrets \
#      --from-literal=database-url="postgresql://user:pass@host:5432/db" \
#      --from-literal=redis-url="redis://host:6379/0" \
#      --from-literal=secret-key="$(python -c 'import secrets; print(secrets.token_urlsafe(32))')" \
#      --from-literal=jwt-secret="$(python -c 'import secrets; print(secrets.token_urlsafe(32))')"
#
# 2. Using Sealed Secrets:
#    kubectl create secret generic openlearn-secrets --dry-run=client -o yaml \
#      --from-literal=database-url="..." | kubeseal -o yaml > sealed-secret.yaml
#
# 3. Using External Secrets Operator:
#    See external-secret.yaml example
#
# 4. Using Helm with values file:
#    See values.yaml for secret configuration
